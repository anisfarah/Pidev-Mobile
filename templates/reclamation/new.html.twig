{% extends 'baseFront.html.twig' %}
{% block title %}
	Books Page
{% endblock %}
{% block body %}
	
	<style>

		#chatbot-container {
			width: 300px;
			height: 400px;
			position: fixed;
			float: right;

			bottom: 10px;
			right: 10px;
			border: 1px solid #ccc;
			border-radius: 5px;
			background-color: #f7f7f7;
			overflow: hidden;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
			font-family: Arial, sans-serif;
		}

		#chatbot-messages {
			height: 80%;
			overflow-y: auto;
			padding: 10px;
		}

		.chatbot-message {
			margin-bottom: 10px;
			padding: 8px;
			border: 1px solid #ccc;
			border-radius: 10px;
			background-color: #fff;
			word-wrap: break-word;
			font-size: 14px;
			line-height: 1.4;
		}

		#chatbot-input {
			width: 100%;
			padding: 8px;
			margin-top: 10px;
			border: none;
			border-radius: 10px;
			background-color: #f1f1f1;
			box-sizing: border-box;
			font-size: 14px;
			line-height: 1.4;
			resize: none;
			outline: none;
		}

		#chatbot-input:focus {
			background-color: #fff;
			box-shadow: 0 0 2px 1px rgba(0, 0, 0, 0.1);
		}


		#chatbot-button {
			/* position: fixed; */
			float: right;
			bottom: 20px;
			right: 20px;
			background-color: #007bff;
			color: #fff;
			padding: 10px;
			border-radius: 50%;
			cursor: pointer;
			transition: all 0.3s ease-in-out;
		}

		#chatbot-button:hover {
			background-color: #0062cc;
		}
		#chatbot-close-button {
			position: absolute;
			top: 0;
			right: 0;
			background-color: red;
			color: white;
			border: none;
			padding: 3px;
			font-size: 10px;
			cursor: pointer;
		}
	</style>
	
	<div class="container-fluid">
		<h1>Ajouter Reclamation</h1>

		<div class="row">
			<div class="col-lg-8">
				{{ form_start(form,{'attr': {'novalidate': 'novalidate'}}
				) }}
				<div class="card-box">
					<div class="form-group mb-3">
						<label for="contenu">Contenu<span class="text-danger">*</span>
						</label>
						{{ form_widget(form.contenu , {'attr': {'class': 'form-control form-control-user' , 'placeholder' : 'Contenu'}}
						) }}
						{{ form_errors(form.contenu) }}
						{{ form_errors(form) }}


					</div>


					<div class="form-group mb-3">
						<label for="description">Image
							<span class="text-danger">*</span>
						</label>
						{{ form_widget(form.img)}}
						{{ form_errors(form.img) }}
					</div>

					<div class="form-group mb-3">
						<label for="categorie">Type
							<span class="text-danger">*</span>
						</label>
						{{ form_widget(form.typeRec , {'attr': {'class': 'form-control form-control-user' , 'placeholder' : 'Type'}}
						) }}
						{{ form_errors(form.typeRec) }}

					</div>

				</div>
				<!-- end card-box -->
				<div class="text-center">

					<div class="form-group mb-3">
						<button type="reset" class="btn w-sm btn-light waves-effect">Annuler</button>
						<button type="submit" class="btn w-sm btn-success waves-effect waves-light">
							Ajouter
						</button>
					</div>
				</div>


				{{ form_end(form) }}


			</div>
			<!-- end col -->

		</div>


		<button id="chatbot-button">Ouvrir le chatbot</button>
		<div id="chatbot-container" style="display: none">
			<button id="chatbot-close-button">fermer</button>

			<div id="chatbot-messages"></div>
			<input type="text" id="chatbot-input" placeholder="Posez une question">
		</div>


	</div>
	<!-- container -->

	<a href="{{ path('app_reclamation_index') }}">back to list</a>

	<script>
		const chatbotButton = document.getElementById('chatbot-button');
const chatbotContainer = document.getElementById('chatbot-container');
const chatbotMessages = document.getElementById('chatbot-messages');
const chatbotInput = document.getElementById('chatbot-input');
const chatbotCloseButton = document.getElementById('chatbot-close-button');


chatbotButton.addEventListener('click', function () {
chatbotContainer.style.display = 'block';
});

chatbotCloseButton.addEventListener('click', function () {
chatbotContainer.style.display = 'none';
});

chatbotInput.addEventListener('keydown', function (event) {
if (event.key === 'Enter') {
event.preventDefault();
const userQuestion = chatbotInput.value.toLowerCase();
const botAnswer = getBotAnswer(userQuestion);
addChatbotMessage(userQuestion, true); // utilisateur
addChatbotMessage(botAnswer, false); // chatbot
chatbotInput.value = '';
}
});

function getBotAnswer(question) {
const responses = {
"bonjour": "Bonjour, comment puis-je vous aider?",
"bonsoir": "Bonsoir, comment puis-je vous aider?",
"salut": "Bonjour, comment puis-je vous aider?",
"problème technique": "Je suis désolé, pouvez-vous me donner plus de détails sur le problème technique que vous rencontrez?",
"bug": "Nous sommes désolés pour ce bug, nous travaillons à le corriger dès que possible.",
"retard": "Je suis désolé pour le retard, pouvez-vous me donner plus de détails sur votre commande?",
"produit défectueux": "Je suis désolé que le produit ne soit pas à la hauteur de vos attentes, pouvez-vous me donner plus de détails sur le problème rencontré?"
};
for (const keyword in responses) {
if (question.includes(keyword)) {
return responses[keyword];
}
}
return "Je suis désolé, je n'ai pas compris votre question.";
}


function addChatbotMessage(message, isUserMessage) {
let chatbotMessage = isUserMessage ? 'Vous : ' : 'Chatbot : ';
chatbotMessages.innerHTML += `<div class="chatbot-message">${chatbotMessage}${message}</div>`;
}
	</script>

{% endblock %}
